# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_7sGoe4kfK52A-SxrjRX4ztQK0nSpA1d
"""
# Commented out IPython magic to ensure Python compatibility.
import pandas as pd, numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv('./dataset/results_r.csv')

X = df.drop(['Season','DateTime','home_team_name','away_team_name','FTR','FTHG','FTAG','HTHG','HTAG','HTR'], axis = 1)
# X
y= df['FTR']
# y

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.80, random_state=42)
X_train.shape, X_test.shape
# y_train
# X_test.head(1)
# a
from sklearn.ensemble import RandomForestClassifier
classifier_rf = RandomForestClassifier(random_state=10,max_depth=5,
                                       n_estimators=100, oob_score=True)


classifier_rf.fit(X_train, y_train)
op = classifier_rf.predict(X_test)

classifier_rf.oob_score_

rf = RandomForestClassifier(random_state=4, n_jobs=-1)

params = {
    'max_depth': [2,3,5,10,20],
    'min_samples_leaf': [5,10,20,50,100,200],
    'n_estimators': [10,25,30,50,100,200]
}

from sklearn.model_selection import GridSearchCV

grid_search = GridSearchCV(estimator=rf,
                           param_grid=params,
                           cv = 3,
                           n_jobs=-1, verbose=1, scoring="accuracy")


grid_search.fit(X_train, y_train)
ok = grid_search.predict(X_test)

grid_search.best_score_

rf_best = grid_search.best_estimator_
# rf_best

rf_best.feature_importances_

imp_df = pd.DataFrame({
    "Features": X_train.columns,
    "Imp": rf_best.feature_importances_
})

imp_df.sort_values(by="Imp", ascending=False)

combined = pd.DataFrame(dict(actual=y_test, predicted=ok))

display_pred = pd.crosstab(index=combined["actual"], columns=combined["predicted"])

from sklearn.metrics import f1_score

f1_score = f1_score(ok,y_test, average='weighted')